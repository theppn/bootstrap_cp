{% extends 'base.html.twig' %}

{% block body %}
    <div id="wrapper">
        <div id="container">
            <div id="welcome">
                <p> <div id="notification_status"></div></p>
                <p> <input type="text" id="notification_title" value="Computer says: "></p>
                <p> <input type="textarea" id="notification_msg" value="Hohoho! Now I have a machine gun!"></p>
                <p> <input type="text" id="notification_icon" value="http://images5.fanpop.com/image/photos/24800000/John-McClane-john-mcclane-24823024-200-200.jpg"></p>
                <p> <input type="text" id="notification_timeout" value="10"></p>
                <p> <input type="button" id="notification_button" value="Yippee ki-yay"></p>
                <p> <div id="yahoo_weather_result"></div></p>
                <p><a href="{{ path('free_logon') }}">Free login (PHP)</a></p>
                <p><a href="{{ path('twitter_logon_step1') }}">Login with Twitter (PHP)</a></p>
                <p><a href="{{ path('facebook_logon_step1') }}">Login with Facebook (PHP)</a></p>
                <!-- <p><button id="fb_login_js">Login with Facebook (JS)</button></p> -->
                <p><div id="status"></div></p>
                <p><a href="{{ path('googleplus_logon_step1') }}">Login with Google+ (PHP)</a></p>
                <p><a href="{{ path('linkedin_logon_step1') }}">Login with LinkedIn (PHP)</a></p>
                <p><a href="{{ path('instagram_logon_step1') }}">Login with Instagram (PHP)</a></p>
                <p> <div>Reloading in <span id="proxy_count">0</span></div></p>
                <p> <div id="result">PLACEHOLDER FOR PROXY RESULT</div></p>
                <div id="proxy_result" style="display:none;"></div>
                <div id="my_map" style="width:700px;height:700px"></div>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    <style>
        .flightable{background: #000; width: 408px; padding: 17px 8px; color: #FFF; font-size: 16px; font-family: Arial;}
        .flightable p{font-weight: bold; font-size: 11px; text-align: center;}
        .flightable h4{font-weight: normal; font-size: 16px;}
        .flightable h4 span{color: #FFF200}

        .titles{float: left; font-size: 11px; color: #FFF; font-weight: bold; margin-bottom: 12px;}
        .titles span{color:#FFF200; display: block; }
        .titles.time{width: 50px;}
        .titles.from{width: 110px;}
        .titles.flight{width: 75px;}
        .titles.expected{width: 60px;}
        .titles.remarks{width: 90px;}

        .ctt{float: left; font-size: 14px; color: #FFF200; margin-bottom:7px;}
        .ctt.time{width: 50px;}
        .ctt.from{width: 110px;}
        .ctt.flight{width: 75px;}
        .ctt.expected{width: 60px;}
        .ctt.remarks{width: 90px;}
    </style>
{% endblock %}
{% block javascripts %}
<script>
    /* BELOW: testing out Facebook JS API */
    /*window.fbAsyncInit = function() {
        FB.init({
            appId      : '1837790199808356',
            xfbml      : true,
            version    : 'v2.8'
        });
        FB.AppEvents.logPageView();
    };

    (function(d, s, id){
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {return;}
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
        document.getElementById('fb_login_js').addEventListener('click', function(e) {
            FB.login(function (response) {
                if (response.status === 'connected') {
                    FB.api('/me', function(response) {
                        console.log('Successful login for: ' + response.name);
                        document.getElementById('status').innerHTML =
                            'Thanks for logging in, ' + response.name + '!';
                    });
                } else {
                    alert('Lol nope.');
                }
            });
        });
    }(document, 'script', 'facebook-jssdk'));*/

    /* BELOW: testing out ajax requests using php proxy to fetch static data and bypass cross-domain limitations */
    var xhttp = new XMLHttpRequest();
    //var targetUrl = "http://www.toulouse.aeroport.fr/passagers/vols-destinations/arrivees-du-jour";
    var targetUrl = "http://www.aerodom.com/app/do/frontpage.aspx";
    var requestTimer = null;
    var countTimer = null;
    var intervalInMs = 10000;
    var startCountTimer = function() {
        stopCountTimer();
        document.getElementById('proxy_count').innerHTML = intervalInMs/1000 ;
        countTimer = setInterval(function() {
            updateCountTimer();
        }, 1000);
    }
    var stopCountTimer = function() {
        clearInterval(countTimer);
    }
    var updateCountTimer = function() {
        var target = document.getElementById('proxy_count');
        target.innerHTML = (parseInt(target.innerHTML, 10) - 1);
    }
    var fetchData = function() {
        xhttp.open("GET", "proxy?url=" + encodeURI(targetUrl) );
        xhttp.send();
    }

    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            var result, buffer;
            buffer = this.responseText.replace(/<img[^>]*>/g, "").replace(/<script[^>]*>/g, "").replace(/<link[^>]*>/g, "");
            document.getElementById('proxy_result').innerHTML = buffer;
            //result = document.getElementById('result-wrapper');
            result = document.getElementsByClassName('flightable')[0];
            document.getElementById('result').innerHTML = '';
            document.getElementById('result').appendChild(result);
            document.getElementById('proxy_result').innerHTML = '';
        }
    };
    /*fetchData();
    startCountTimer();
    requestTimer = setInterval(function() {
        fetchData();
        startCountTimer();
    }, intervalInMs);*/

</script>
    <!-- BELOW: testing integration of AdVideum script -->
    <!-- <script type="text/javascript" src="//cdn.advideum.com/tag.js?id=359-151607&plt=preroll" async="true"></script> -->

<!-- BELOW: testing geolocation and google map api -->
<script type="text/javascript">
    var map;
    function myMap() {
        if ("geolocation" in navigator) {
            console.log('geolocation is available');
            var do_something = function (lat, long) {
                console.log('reported geolocation coordinates are ' + lat + ' lat and ' + long + ' long');
                var mapCanvas = document.getElementById("my_map");
                var mapOptions = {
                    center: new google.maps.LatLng(lat, long),
                    zoom:18,
                    mapTypeId:google.maps.MapTypeId.HYBRID
                };
                map = new google.maps.Map(mapCanvas,mapOptions);
            };
            var geo_options = {
                enableHighAccuracy: true,
                maximumAge        : 30000,
                timeout           : 30000
            };
            var watchID;
            navigator.geolocation.getCurrentPosition(function(position) {
                do_something(position.coords.latitude, position.coords.longitude);
                navigator.geolocation.watchPosition(function(position) {
                    console.log('updated reported geolocation coordinates are ' + position.coords.latitude + ' lat and ' + position.coords.longitude + ' long');
                    map.setCenter('(' + position.coords.latitude + ',' + position.coords.longitude + ')');
                });
            }, function() {
                console.log('no position available');
            }, geo_options);
        } else {
            console.log('geolocation IS NOT available');
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyChjVWGO2hL0wI4rT1Snof_5o79T8jZVZ4&callback=myMap"></script>

<!-- BELOW: testing notification api -->
<script type="text/javascript">
    if (Notification) {
        var notificationCheckPermission = function() {
            return Notification.permission;
        }

        var notificationAskPermission = function() {
            return Notification.requestPermission().then(function(result) {
                console.log(result);
            });
        }

        var notificationMake = function(title, msg, icon, timeout) {
            console.log("Making a new Notification");
            var options = {};
            if (typeof msg === "string") {
                options['body'] = msg;
            }
            if (typeof icon === "string") {
                options['icon'] = icon;
            }
            var notif = new Notification(title, options);
            if (typeof timeout === "number") {
                setTimeout(notif.close.bind(notif), timeout*1000);
            }
        }

        var notificationUserMake = function() {
            var title = document.getElementById('notification_title').value;
            var msg = document.getElementById('notification_msg').value;
            var icon = document.getElementById('notification_icon').value;
            var timeout = document.getElementById('notification_timeout').value;
            notificationMake(title, msg, icon, timeout);
        }

        var notificationRun = function() {
            var permission = notificationCheckPermission();
            switch (permission) {
                case "denied":
                    console.log("Notifications blocked by user");
                    document.getElementById('notification_status').innerHTML = "User denied notifications permission.";
                    return -1;
                    break;
                case "granted":
                    console.log("Notification allowed by user");
                    document.getElementById('notification_status').innerHTML = "User granted notifications permission.";
                    notificationUserMake();
                    document.getElementById('notification_button').addEventListener('click', function() {
                        notificationUserMake();
                    });
                    return 1;
                    break;
                case "default":
                default:
                    console.log("Notification permission unknown, ask user");
                    document.getElementById('notification_status').innerHTML = "Notification permission unknown, ask user";
                    notificationAskPermission().then(function() {
                        notificationRun();
                    });
                    return 0;
            }
        }
        notificationRun();
    }
    </script>

    <!-- BELOW: testing Yahoo weather api -->
    <script>
    var yahooCb = function(data) {
        document.getElementById('yahoo_weather_result').innerHTML = JSON.stringify(data);
    };
    </script>

    <script src="https://query.yahooapis.com/v1/public/yql?q=select%20item.condition%20from%20weather.forecast%20where%20woeid%20%3D%20615702%20and%20u%3D'c'&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&format=json&callback=yahooCb"></script>
{% endblock %}